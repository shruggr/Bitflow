// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bitindex.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from bitindex.proto</summary>
public static partial class BitindexReflection {

  #region Descriptor
  /// <summary>File descriptor for bitindex.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BitindexReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5iaXRpbmRleC5wcm90byKpAQoMQml0SW5kZXhVVFhPEg8KB2FkZHJlc3MY",
          "ASABKAkSDAoEdHhpZBgCIAEoCRIMCgR2b3V0GAMgASgFEg4KBmFtb3VudBgE",
          "IAEoAhIQCghzYXRvc2hpcxgFIAEoAxINCgV2YWx1ZRgGIAEoBRIOCgZoZWln",
          "aHQYByABKAUSFQoNY29uZmlybWF0aW9ucxgIIAEoBRIUCgxzY3JpcHRQdWJL",
          "ZXkYCSABKAkinQQKCkJpdEluZGV4VHgSCwoDaGV4GAEgASgJEgwKBHR4aWQY",
          "AiABKAkSDAoEaGFzaBgDIAEoCRIMCgRzaXplGAQgASgFEg8KB3ZlcnNpb24Y",
          "BSABKAUSEAoIbG9ja3RpbWUYBiABKAUSHAoDdmluGAcgAygLMg8uQml0SW5k",
          "ZXhUeC5WaW4SHgoEdm91dBgIIAMoCzIQLkJpdEluZGV4VHguVm91dBIRCgli",
          "bG9ja2hhc2gYCSABKAkSFQoNY29uZmlybWF0aW9ucxgKIAEoBRIMCgR0aW1l",
          "GAsgASgFEhEKCWJsb2NrdGltZRgMIAEoBRqIAQoDVmluEgwKBHR4aWQYASAB",
          "KAkSDAoEdm91dBgCIAEoBRIsCglzY3JpcHRTaWcYAyABKAsyGS5CaXRJbmRl",
          "eFR4LlZpbi5TY3JpcHRTaWcSEAoIc2VxdWVuY2UYBCABKAMaJQoJU2NyaXB0",
          "U2lnEgsKA2FzbRgBIAEoCRILCgNoZXgYAiABKAkaoAEKBFZvdXQSDQoFdmFs",
          "dWUYASABKAISCQoBbhgCIAEoBRIzCgxzY3JpcHRQdWJLZXkYAyABKAsyHS5C",
          "aXRJbmRleFR4LlZvdXQuU2NyaXB0UHViS2V5GkkKDFNjcmlwdFB1YktleRIL",
          "CgNhc20YASABKAkSCwoDaGV4GAIgASgJEgwKBHR5cGUYAyABKAkSEQoJYWRk",
          "cmVzc2VzGAQgAygJIkQKE0JpdEluZGV4QWRkcmVzc0xpc3QSDwoHYWRkcmVz",
          "cxgBIAEoCRIMCgR0eGlkGAIgASgJEg4KBmhlaWdodBgDIAEoBSKwAgoWQml0",
          "SW5kZXhBZGRyZXNzRGV0YWlscxIPCgdhZGRyU3RyGAEgASgJEg8KB2JhbGFu",
          "Y2UYAiABKAISEgoKYmFsYW5jZVNhdBgDIAEoAxIVCg10b3RhbFJlY2VpdmVk",
          "GAQgASgCEhgKEHRvdGFsUmVjZWl2ZWRTYXQYBSABKAMSEQoJdG90YWxTZW50",
          "GAYgASgCEhQKDHRvdGFsU2VudFNhdBgHIAEoAxIaChJ1bmNvbmZpcm1lZEJh",
          "bGFuY2UYCCABKAISHQoVdW5jb25maXJtZWRCYWxhbmNlU2F0GAkgASgDEh8K",
          "F3VuY29uZmlybWVkVHhBcHBlcmFuY2VzGAogASgDEhQKDHR4QXBwZXJhbmNl",
          "cxgLIAEoAxIUCgx0cmFuc2FjdGlvbnMYDCADKAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexUTXO), global::BitIndexUTXO.Parser, new[]{ "Address", "Txid", "Vout", "Amount", "Satoshis", "Value", "Height", "Confirmations", "ScriptPubKey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexTx), global::BitIndexTx.Parser, new[]{ "Hex", "Txid", "Hash", "Size", "Version", "Locktime", "Vin", "Vout", "Blockhash", "Confirmations", "Time", "Blocktime" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexTx.Types.Vin), global::BitIndexTx.Types.Vin.Parser, new[]{ "Txid", "Vout", "ScriptSig", "Sequence" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexTx.Types.Vin.Types.ScriptSig), global::BitIndexTx.Types.Vin.Types.ScriptSig.Parser, new[]{ "Asm", "Hex" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexTx.Types.Vout), global::BitIndexTx.Types.Vout.Parser, new[]{ "Value", "N", "ScriptPubKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexTx.Types.Vout.Types.ScriptPubKey), global::BitIndexTx.Types.Vout.Types.ScriptPubKey.Parser, new[]{ "Asm", "Hex", "Type", "Addresses" }, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexAddressList), global::BitIndexAddressList.Parser, new[]{ "Address", "Txid", "Height" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BitIndexAddressDetails), global::BitIndexAddressDetails.Parser, new[]{ "AddrStr", "Balance", "BalanceSat", "TotalReceived", "TotalReceivedSat", "TotalSent", "TotalSentSat", "UnconfirmedBalance", "UnconfirmedBalanceSat", "UnconfirmedTxApperances", "TxApperances", "Transactions" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BitIndexUTXO : pb::IMessage<BitIndexUTXO> {
  private static readonly pb::MessageParser<BitIndexUTXO> _parser = new pb::MessageParser<BitIndexUTXO>(() => new BitIndexUTXO());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BitIndexUTXO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitindexReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexUTXO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexUTXO(BitIndexUTXO other) : this() {
    address_ = other.address_;
    txid_ = other.txid_;
    vout_ = other.vout_;
    amount_ = other.amount_;
    satoshis_ = other.satoshis_;
    value_ = other.value_;
    height_ = other.height_;
    confirmations_ = other.confirmations_;
    scriptPubKey_ = other.scriptPubKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexUTXO Clone() {
    return new BitIndexUTXO(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private string address_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address {
    get { return address_; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "txid" field.</summary>
  public const int TxidFieldNumber = 2;
  private string txid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Txid {
    get { return txid_; }
    set {
      txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "vout" field.</summary>
  public const int VoutFieldNumber = 3;
  private int vout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vout {
    get { return vout_; }
    set {
      vout_ = value;
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 4;
  private float amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  /// <summary>Field number for the "satoshis" field.</summary>
  public const int SatoshisFieldNumber = 5;
  private long satoshis_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Satoshis {
    get { return satoshis_; }
    set {
      satoshis_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 6;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 7;
  private int height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  /// <summary>Field number for the "confirmations" field.</summary>
  public const int ConfirmationsFieldNumber = 8;
  private int confirmations_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Confirmations {
    get { return confirmations_; }
    set {
      confirmations_ = value;
    }
  }

  /// <summary>Field number for the "scriptPubKey" field.</summary>
  public const int ScriptPubKeyFieldNumber = 9;
  private string scriptPubKey_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ScriptPubKey {
    get { return scriptPubKey_; }
    set {
      scriptPubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BitIndexUTXO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BitIndexUTXO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Txid != other.Txid) return false;
    if (Vout != other.Vout) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
    if (Satoshis != other.Satoshis) return false;
    if (Value != other.Value) return false;
    if (Height != other.Height) return false;
    if (Confirmations != other.Confirmations) return false;
    if (ScriptPubKey != other.ScriptPubKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address.Length != 0) hash ^= Address.GetHashCode();
    if (Txid.Length != 0) hash ^= Txid.GetHashCode();
    if (Vout != 0) hash ^= Vout.GetHashCode();
    if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
    if (Satoshis != 0L) hash ^= Satoshis.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (Confirmations != 0) hash ^= Confirmations.GetHashCode();
    if (ScriptPubKey.Length != 0) hash ^= ScriptPubKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Address);
    }
    if (Txid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Txid);
    }
    if (Vout != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Vout);
    }
    if (Amount != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Amount);
    }
    if (Satoshis != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Satoshis);
    }
    if (Value != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Value);
    }
    if (Height != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Height);
    }
    if (Confirmations != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Confirmations);
    }
    if (ScriptPubKey.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ScriptPubKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (Txid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
    }
    if (Vout != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vout);
    }
    if (Amount != 0F) {
      size += 1 + 4;
    }
    if (Satoshis != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Satoshis);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (Confirmations != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confirmations);
    }
    if (ScriptPubKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptPubKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BitIndexUTXO other) {
    if (other == null) {
      return;
    }
    if (other.Address.Length != 0) {
      Address = other.Address;
    }
    if (other.Txid.Length != 0) {
      Txid = other.Txid;
    }
    if (other.Vout != 0) {
      Vout = other.Vout;
    }
    if (other.Amount != 0F) {
      Amount = other.Amount;
    }
    if (other.Satoshis != 0L) {
      Satoshis = other.Satoshis;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    if (other.Confirmations != 0) {
      Confirmations = other.Confirmations;
    }
    if (other.ScriptPubKey.Length != 0) {
      ScriptPubKey = other.ScriptPubKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Address = input.ReadString();
          break;
        }
        case 18: {
          Txid = input.ReadString();
          break;
        }
        case 24: {
          Vout = input.ReadInt32();
          break;
        }
        case 37: {
          Amount = input.ReadFloat();
          break;
        }
        case 40: {
          Satoshis = input.ReadInt64();
          break;
        }
        case 48: {
          Value = input.ReadInt32();
          break;
        }
        case 56: {
          Height = input.ReadInt32();
          break;
        }
        case 64: {
          Confirmations = input.ReadInt32();
          break;
        }
        case 74: {
          ScriptPubKey = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class BitIndexTx : pb::IMessage<BitIndexTx> {
  private static readonly pb::MessageParser<BitIndexTx> _parser = new pb::MessageParser<BitIndexTx>(() => new BitIndexTx());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BitIndexTx> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitindexReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexTx() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexTx(BitIndexTx other) : this() {
    hex_ = other.hex_;
    txid_ = other.txid_;
    hash_ = other.hash_;
    size_ = other.size_;
    version_ = other.version_;
    locktime_ = other.locktime_;
    vin_ = other.vin_.Clone();
    vout_ = other.vout_.Clone();
    blockhash_ = other.blockhash_;
    confirmations_ = other.confirmations_;
    time_ = other.time_;
    blocktime_ = other.blocktime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexTx Clone() {
    return new BitIndexTx(this);
  }

  /// <summary>Field number for the "hex" field.</summary>
  public const int HexFieldNumber = 1;
  private string hex_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hex {
    get { return hex_; }
    set {
      hex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "txid" field.</summary>
  public const int TxidFieldNumber = 2;
  private string txid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Txid {
    get { return txid_; }
    set {
      txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 3;
  private string hash_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hash {
    get { return hash_; }
    set {
      hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 4;
  private int size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 5;
  private int version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "locktime" field.</summary>
  public const int LocktimeFieldNumber = 6;
  private int locktime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Locktime {
    get { return locktime_; }
    set {
      locktime_ = value;
    }
  }

  /// <summary>Field number for the "vin" field.</summary>
  public const int VinFieldNumber = 7;
  private static readonly pb::FieldCodec<global::BitIndexTx.Types.Vin> _repeated_vin_codec
      = pb::FieldCodec.ForMessage(58, global::BitIndexTx.Types.Vin.Parser);
  private readonly pbc::RepeatedField<global::BitIndexTx.Types.Vin> vin_ = new pbc::RepeatedField<global::BitIndexTx.Types.Vin>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BitIndexTx.Types.Vin> Vin {
    get { return vin_; }
  }

  /// <summary>Field number for the "vout" field.</summary>
  public const int VoutFieldNumber = 8;
  private static readonly pb::FieldCodec<global::BitIndexTx.Types.Vout> _repeated_vout_codec
      = pb::FieldCodec.ForMessage(66, global::BitIndexTx.Types.Vout.Parser);
  private readonly pbc::RepeatedField<global::BitIndexTx.Types.Vout> vout_ = new pbc::RepeatedField<global::BitIndexTx.Types.Vout>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BitIndexTx.Types.Vout> Vout {
    get { return vout_; }
  }

  /// <summary>Field number for the "blockhash" field.</summary>
  public const int BlockhashFieldNumber = 9;
  private string blockhash_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Blockhash {
    get { return blockhash_; }
    set {
      blockhash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "confirmations" field.</summary>
  public const int ConfirmationsFieldNumber = 10;
  private int confirmations_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Confirmations {
    get { return confirmations_; }
    set {
      confirmations_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 11;
  private int time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "blocktime" field.</summary>
  public const int BlocktimeFieldNumber = 12;
  private int blocktime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Blocktime {
    get { return blocktime_; }
    set {
      blocktime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BitIndexTx);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BitIndexTx other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hex != other.Hex) return false;
    if (Txid != other.Txid) return false;
    if (Hash != other.Hash) return false;
    if (Size != other.Size) return false;
    if (Version != other.Version) return false;
    if (Locktime != other.Locktime) return false;
    if(!vin_.Equals(other.vin_)) return false;
    if(!vout_.Equals(other.vout_)) return false;
    if (Blockhash != other.Blockhash) return false;
    if (Confirmations != other.Confirmations) return false;
    if (Time != other.Time) return false;
    if (Blocktime != other.Blocktime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Hex.Length != 0) hash ^= Hex.GetHashCode();
    if (Txid.Length != 0) hash ^= Txid.GetHashCode();
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    if (Locktime != 0) hash ^= Locktime.GetHashCode();
    hash ^= vin_.GetHashCode();
    hash ^= vout_.GetHashCode();
    if (Blockhash.Length != 0) hash ^= Blockhash.GetHashCode();
    if (Confirmations != 0) hash ^= Confirmations.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (Blocktime != 0) hash ^= Blocktime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Hex.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Hex);
    }
    if (Txid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Txid);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Hash);
    }
    if (Size != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Size);
    }
    if (Version != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Version);
    }
    if (Locktime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Locktime);
    }
    vin_.WriteTo(output, _repeated_vin_codec);
    vout_.WriteTo(output, _repeated_vout_codec);
    if (Blockhash.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Blockhash);
    }
    if (Confirmations != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Confirmations);
    }
    if (Time != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Time);
    }
    if (Blocktime != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Blocktime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Hex.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hex);
    }
    if (Txid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
    }
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
    }
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (Locktime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Locktime);
    }
    size += vin_.CalculateSize(_repeated_vin_codec);
    size += vout_.CalculateSize(_repeated_vout_codec);
    if (Blockhash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Blockhash);
    }
    if (Confirmations != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confirmations);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    if (Blocktime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blocktime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BitIndexTx other) {
    if (other == null) {
      return;
    }
    if (other.Hex.Length != 0) {
      Hex = other.Hex;
    }
    if (other.Txid.Length != 0) {
      Txid = other.Txid;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    if (other.Locktime != 0) {
      Locktime = other.Locktime;
    }
    vin_.Add(other.vin_);
    vout_.Add(other.vout_);
    if (other.Blockhash.Length != 0) {
      Blockhash = other.Blockhash;
    }
    if (other.Confirmations != 0) {
      Confirmations = other.Confirmations;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.Blocktime != 0) {
      Blocktime = other.Blocktime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Hex = input.ReadString();
          break;
        }
        case 18: {
          Txid = input.ReadString();
          break;
        }
        case 26: {
          Hash = input.ReadString();
          break;
        }
        case 32: {
          Size = input.ReadInt32();
          break;
        }
        case 40: {
          Version = input.ReadInt32();
          break;
        }
        case 48: {
          Locktime = input.ReadInt32();
          break;
        }
        case 58: {
          vin_.AddEntriesFrom(input, _repeated_vin_codec);
          break;
        }
        case 66: {
          vout_.AddEntriesFrom(input, _repeated_vout_codec);
          break;
        }
        case 74: {
          Blockhash = input.ReadString();
          break;
        }
        case 80: {
          Confirmations = input.ReadInt32();
          break;
        }
        case 88: {
          Time = input.ReadInt32();
          break;
        }
        case 96: {
          Blocktime = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BitIndexTx message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Vin : pb::IMessage<Vin> {
      private static readonly pb::MessageParser<Vin> _parser = new pb::MessageParser<Vin>(() => new Vin());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Vin> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BitIndexTx.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vin() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vin(Vin other) : this() {
        txid_ = other.txid_;
        vout_ = other.vout_;
        scriptSig_ = other.scriptSig_ != null ? other.scriptSig_.Clone() : null;
        sequence_ = other.sequence_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vin Clone() {
        return new Vin(this);
      }

      /// <summary>Field number for the "txid" field.</summary>
      public const int TxidFieldNumber = 1;
      private string txid_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Txid {
        get { return txid_; }
        set {
          txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "vout" field.</summary>
      public const int VoutFieldNumber = 2;
      private int vout_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Vout {
        get { return vout_; }
        set {
          vout_ = value;
        }
      }

      /// <summary>Field number for the "scriptSig" field.</summary>
      public const int ScriptSigFieldNumber = 3;
      private global::BitIndexTx.Types.Vin.Types.ScriptSig scriptSig_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BitIndexTx.Types.Vin.Types.ScriptSig ScriptSig {
        get { return scriptSig_; }
        set {
          scriptSig_ = value;
        }
      }

      /// <summary>Field number for the "sequence" field.</summary>
      public const int SequenceFieldNumber = 4;
      private long sequence_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long Sequence {
        get { return sequence_; }
        set {
          sequence_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Vin);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Vin other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Txid != other.Txid) return false;
        if (Vout != other.Vout) return false;
        if (!object.Equals(ScriptSig, other.ScriptSig)) return false;
        if (Sequence != other.Sequence) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Txid.Length != 0) hash ^= Txid.GetHashCode();
        if (Vout != 0) hash ^= Vout.GetHashCode();
        if (scriptSig_ != null) hash ^= ScriptSig.GetHashCode();
        if (Sequence != 0L) hash ^= Sequence.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Txid.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Txid);
        }
        if (Vout != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Vout);
        }
        if (scriptSig_ != null) {
          output.WriteRawTag(26);
          output.WriteMessage(ScriptSig);
        }
        if (Sequence != 0L) {
          output.WriteRawTag(32);
          output.WriteInt64(Sequence);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Txid.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
        }
        if (Vout != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vout);
        }
        if (scriptSig_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptSig);
        }
        if (Sequence != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Vin other) {
        if (other == null) {
          return;
        }
        if (other.Txid.Length != 0) {
          Txid = other.Txid;
        }
        if (other.Vout != 0) {
          Vout = other.Vout;
        }
        if (other.scriptSig_ != null) {
          if (scriptSig_ == null) {
            scriptSig_ = new global::BitIndexTx.Types.Vin.Types.ScriptSig();
          }
          ScriptSig.MergeFrom(other.ScriptSig);
        }
        if (other.Sequence != 0L) {
          Sequence = other.Sequence;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Txid = input.ReadString();
              break;
            }
            case 16: {
              Vout = input.ReadInt32();
              break;
            }
            case 26: {
              if (scriptSig_ == null) {
                scriptSig_ = new global::BitIndexTx.Types.Vin.Types.ScriptSig();
              }
              input.ReadMessage(scriptSig_);
              break;
            }
            case 32: {
              Sequence = input.ReadInt64();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Vin message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class ScriptSig : pb::IMessage<ScriptSig> {
          private static readonly pb::MessageParser<ScriptSig> _parser = new pb::MessageParser<ScriptSig>(() => new ScriptSig());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ScriptSig> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BitIndexTx.Types.Vin.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptSig() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptSig(ScriptSig other) : this() {
            asm_ = other.asm_;
            hex_ = other.hex_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptSig Clone() {
            return new ScriptSig(this);
          }

          /// <summary>Field number for the "asm" field.</summary>
          public const int AsmFieldNumber = 1;
          private string asm_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Asm {
            get { return asm_; }
            set {
              asm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "hex" field.</summary>
          public const int HexFieldNumber = 2;
          private string hex_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Hex {
            get { return hex_; }
            set {
              hex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ScriptSig);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ScriptSig other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Asm != other.Asm) return false;
            if (Hex != other.Hex) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Asm.Length != 0) hash ^= Asm.GetHashCode();
            if (Hex.Length != 0) hash ^= Hex.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Asm.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Asm);
            }
            if (Hex.Length != 0) {
              output.WriteRawTag(18);
              output.WriteString(Hex);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Asm.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Asm);
            }
            if (Hex.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Hex);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ScriptSig other) {
            if (other == null) {
              return;
            }
            if (other.Asm.Length != 0) {
              Asm = other.Asm;
            }
            if (other.Hex.Length != 0) {
              Hex = other.Hex;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Asm = input.ReadString();
                  break;
                }
                case 18: {
                  Hex = input.ReadString();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    public sealed partial class Vout : pb::IMessage<Vout> {
      private static readonly pb::MessageParser<Vout> _parser = new pb::MessageParser<Vout>(() => new Vout());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Vout> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BitIndexTx.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vout() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vout(Vout other) : this() {
        value_ = other.value_;
        n_ = other.n_;
        scriptPubKey_ = other.scriptPubKey_ != null ? other.scriptPubKey_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vout Clone() {
        return new Vout(this);
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 1;
      private float value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Value {
        get { return value_; }
        set {
          value_ = value;
        }
      }

      /// <summary>Field number for the "n" field.</summary>
      public const int NFieldNumber = 2;
      private int n_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int N {
        get { return n_; }
        set {
          n_ = value;
        }
      }

      /// <summary>Field number for the "scriptPubKey" field.</summary>
      public const int ScriptPubKeyFieldNumber = 3;
      private global::BitIndexTx.Types.Vout.Types.ScriptPubKey scriptPubKey_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BitIndexTx.Types.Vout.Types.ScriptPubKey ScriptPubKey {
        get { return scriptPubKey_; }
        set {
          scriptPubKey_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Vout);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Vout other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
        if (N != other.N) return false;
        if (!object.Equals(ScriptPubKey, other.ScriptPubKey)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
        if (N != 0) hash ^= N.GetHashCode();
        if (scriptPubKey_ != null) hash ^= ScriptPubKey.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Value != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Value);
        }
        if (N != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(N);
        }
        if (scriptPubKey_ != null) {
          output.WriteRawTag(26);
          output.WriteMessage(ScriptPubKey);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Value != 0F) {
          size += 1 + 4;
        }
        if (N != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
        }
        if (scriptPubKey_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptPubKey);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Vout other) {
        if (other == null) {
          return;
        }
        if (other.Value != 0F) {
          Value = other.Value;
        }
        if (other.N != 0) {
          N = other.N;
        }
        if (other.scriptPubKey_ != null) {
          if (scriptPubKey_ == null) {
            scriptPubKey_ = new global::BitIndexTx.Types.Vout.Types.ScriptPubKey();
          }
          ScriptPubKey.MergeFrom(other.ScriptPubKey);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Value = input.ReadFloat();
              break;
            }
            case 16: {
              N = input.ReadInt32();
              break;
            }
            case 26: {
              if (scriptPubKey_ == null) {
                scriptPubKey_ = new global::BitIndexTx.Types.Vout.Types.ScriptPubKey();
              }
              input.ReadMessage(scriptPubKey_);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Vout message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class ScriptPubKey : pb::IMessage<ScriptPubKey> {
          private static readonly pb::MessageParser<ScriptPubKey> _parser = new pb::MessageParser<ScriptPubKey>(() => new ScriptPubKey());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ScriptPubKey> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BitIndexTx.Types.Vout.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptPubKey() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptPubKey(ScriptPubKey other) : this() {
            asm_ = other.asm_;
            hex_ = other.hex_;
            type_ = other.type_;
            addresses_ = other.addresses_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ScriptPubKey Clone() {
            return new ScriptPubKey(this);
          }

          /// <summary>Field number for the "asm" field.</summary>
          public const int AsmFieldNumber = 1;
          private string asm_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Asm {
            get { return asm_; }
            set {
              asm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "hex" field.</summary>
          public const int HexFieldNumber = 2;
          private string hex_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Hex {
            get { return hex_; }
            set {
              hex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "type" field.</summary>
          public const int TypeFieldNumber = 3;
          private string type_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Type {
            get { return type_; }
            set {
              type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "addresses" field.</summary>
          public const int AddressesFieldNumber = 4;
          private static readonly pb::FieldCodec<string> _repeated_addresses_codec
              = pb::FieldCodec.ForString(34);
          private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<string> Addresses {
            get { return addresses_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ScriptPubKey);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ScriptPubKey other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Asm != other.Asm) return false;
            if (Hex != other.Hex) return false;
            if (Type != other.Type) return false;
            if(!addresses_.Equals(other.addresses_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Asm.Length != 0) hash ^= Asm.GetHashCode();
            if (Hex.Length != 0) hash ^= Hex.GetHashCode();
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            hash ^= addresses_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Asm.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Asm);
            }
            if (Hex.Length != 0) {
              output.WriteRawTag(18);
              output.WriteString(Hex);
            }
            if (Type.Length != 0) {
              output.WriteRawTag(26);
              output.WriteString(Type);
            }
            addresses_.WriteTo(output, _repeated_addresses_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Asm.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Asm);
            }
            if (Hex.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Hex);
            }
            if (Type.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            size += addresses_.CalculateSize(_repeated_addresses_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ScriptPubKey other) {
            if (other == null) {
              return;
            }
            if (other.Asm.Length != 0) {
              Asm = other.Asm;
            }
            if (other.Hex.Length != 0) {
              Hex = other.Hex;
            }
            if (other.Type.Length != 0) {
              Type = other.Type;
            }
            addresses_.Add(other.addresses_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Asm = input.ReadString();
                  break;
                }
                case 18: {
                  Hex = input.ReadString();
                  break;
                }
                case 26: {
                  Type = input.ReadString();
                  break;
                }
                case 34: {
                  addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class BitIndexAddressList : pb::IMessage<BitIndexAddressList> {
  private static readonly pb::MessageParser<BitIndexAddressList> _parser = new pb::MessageParser<BitIndexAddressList>(() => new BitIndexAddressList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BitIndexAddressList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitindexReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressList(BitIndexAddressList other) : this() {
    address_ = other.address_;
    txid_ = other.txid_;
    height_ = other.height_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressList Clone() {
    return new BitIndexAddressList(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private string address_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address {
    get { return address_; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "txid" field.</summary>
  public const int TxidFieldNumber = 2;
  private string txid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Txid {
    get { return txid_; }
    set {
      txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 3;
  private int height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BitIndexAddressList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BitIndexAddressList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Txid != other.Txid) return false;
    if (Height != other.Height) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address.Length != 0) hash ^= Address.GetHashCode();
    if (Txid.Length != 0) hash ^= Txid.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Address);
    }
    if (Txid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Txid);
    }
    if (Height != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Height);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (Txid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BitIndexAddressList other) {
    if (other == null) {
      return;
    }
    if (other.Address.Length != 0) {
      Address = other.Address;
    }
    if (other.Txid.Length != 0) {
      Txid = other.Txid;
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Address = input.ReadString();
          break;
        }
        case 18: {
          Txid = input.ReadString();
          break;
        }
        case 24: {
          Height = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BitIndexAddressDetails : pb::IMessage<BitIndexAddressDetails> {
  private static readonly pb::MessageParser<BitIndexAddressDetails> _parser = new pb::MessageParser<BitIndexAddressDetails>(() => new BitIndexAddressDetails());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BitIndexAddressDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitindexReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressDetails(BitIndexAddressDetails other) : this() {
    addrStr_ = other.addrStr_;
    balance_ = other.balance_;
    balanceSat_ = other.balanceSat_;
    totalReceived_ = other.totalReceived_;
    totalReceivedSat_ = other.totalReceivedSat_;
    totalSent_ = other.totalSent_;
    totalSentSat_ = other.totalSentSat_;
    unconfirmedBalance_ = other.unconfirmedBalance_;
    unconfirmedBalanceSat_ = other.unconfirmedBalanceSat_;
    unconfirmedTxApperances_ = other.unconfirmedTxApperances_;
    txApperances_ = other.txApperances_;
    transactions_ = other.transactions_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BitIndexAddressDetails Clone() {
    return new BitIndexAddressDetails(this);
  }

  /// <summary>Field number for the "addrStr" field.</summary>
  public const int AddrStrFieldNumber = 1;
  private string addrStr_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AddrStr {
    get { return addrStr_; }
    set {
      addrStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 2;
  private float balance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Balance {
    get { return balance_; }
    set {
      balance_ = value;
    }
  }

  /// <summary>Field number for the "balanceSat" field.</summary>
  public const int BalanceSatFieldNumber = 3;
  private long balanceSat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BalanceSat {
    get { return balanceSat_; }
    set {
      balanceSat_ = value;
    }
  }

  /// <summary>Field number for the "totalReceived" field.</summary>
  public const int TotalReceivedFieldNumber = 4;
  private float totalReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalReceived {
    get { return totalReceived_; }
    set {
      totalReceived_ = value;
    }
  }

  /// <summary>Field number for the "totalReceivedSat" field.</summary>
  public const int TotalReceivedSatFieldNumber = 5;
  private long totalReceivedSat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TotalReceivedSat {
    get { return totalReceivedSat_; }
    set {
      totalReceivedSat_ = value;
    }
  }

  /// <summary>Field number for the "totalSent" field.</summary>
  public const int TotalSentFieldNumber = 6;
  private float totalSent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalSent {
    get { return totalSent_; }
    set {
      totalSent_ = value;
    }
  }

  /// <summary>Field number for the "totalSentSat" field.</summary>
  public const int TotalSentSatFieldNumber = 7;
  private long totalSentSat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TotalSentSat {
    get { return totalSentSat_; }
    set {
      totalSentSat_ = value;
    }
  }

  /// <summary>Field number for the "unconfirmedBalance" field.</summary>
  public const int UnconfirmedBalanceFieldNumber = 8;
  private float unconfirmedBalance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float UnconfirmedBalance {
    get { return unconfirmedBalance_; }
    set {
      unconfirmedBalance_ = value;
    }
  }

  /// <summary>Field number for the "unconfirmedBalanceSat" field.</summary>
  public const int UnconfirmedBalanceSatFieldNumber = 9;
  private long unconfirmedBalanceSat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UnconfirmedBalanceSat {
    get { return unconfirmedBalanceSat_; }
    set {
      unconfirmedBalanceSat_ = value;
    }
  }

  /// <summary>Field number for the "unconfirmedTxApperances" field.</summary>
  public const int UnconfirmedTxApperancesFieldNumber = 10;
  private long unconfirmedTxApperances_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UnconfirmedTxApperances {
    get { return unconfirmedTxApperances_; }
    set {
      unconfirmedTxApperances_ = value;
    }
  }

  /// <summary>Field number for the "txApperances" field.</summary>
  public const int TxApperancesFieldNumber = 11;
  private long txApperances_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TxApperances {
    get { return txApperances_; }
    set {
      txApperances_ = value;
    }
  }

  /// <summary>Field number for the "transactions" field.</summary>
  public const int TransactionsFieldNumber = 12;
  private static readonly pb::FieldCodec<string> _repeated_transactions_codec
      = pb::FieldCodec.ForString(98);
  private readonly pbc::RepeatedField<string> transactions_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Transactions {
    get { return transactions_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BitIndexAddressDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BitIndexAddressDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AddrStr != other.AddrStr) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Balance, other.Balance)) return false;
    if (BalanceSat != other.BalanceSat) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalReceived, other.TotalReceived)) return false;
    if (TotalReceivedSat != other.TotalReceivedSat) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalSent, other.TotalSent)) return false;
    if (TotalSentSat != other.TotalSentSat) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnconfirmedBalance, other.UnconfirmedBalance)) return false;
    if (UnconfirmedBalanceSat != other.UnconfirmedBalanceSat) return false;
    if (UnconfirmedTxApperances != other.UnconfirmedTxApperances) return false;
    if (TxApperances != other.TxApperances) return false;
    if(!transactions_.Equals(other.transactions_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AddrStr.Length != 0) hash ^= AddrStr.GetHashCode();
    if (Balance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Balance);
    if (BalanceSat != 0L) hash ^= BalanceSat.GetHashCode();
    if (TotalReceived != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalReceived);
    if (TotalReceivedSat != 0L) hash ^= TotalReceivedSat.GetHashCode();
    if (TotalSent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalSent);
    if (TotalSentSat != 0L) hash ^= TotalSentSat.GetHashCode();
    if (UnconfirmedBalance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnconfirmedBalance);
    if (UnconfirmedBalanceSat != 0L) hash ^= UnconfirmedBalanceSat.GetHashCode();
    if (UnconfirmedTxApperances != 0L) hash ^= UnconfirmedTxApperances.GetHashCode();
    if (TxApperances != 0L) hash ^= TxApperances.GetHashCode();
    hash ^= transactions_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AddrStr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(AddrStr);
    }
    if (Balance != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Balance);
    }
    if (BalanceSat != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(BalanceSat);
    }
    if (TotalReceived != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(TotalReceived);
    }
    if (TotalReceivedSat != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(TotalReceivedSat);
    }
    if (TotalSent != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(TotalSent);
    }
    if (TotalSentSat != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(TotalSentSat);
    }
    if (UnconfirmedBalance != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(UnconfirmedBalance);
    }
    if (UnconfirmedBalanceSat != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(UnconfirmedBalanceSat);
    }
    if (UnconfirmedTxApperances != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(UnconfirmedTxApperances);
    }
    if (TxApperances != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(TxApperances);
    }
    transactions_.WriteTo(output, _repeated_transactions_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AddrStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AddrStr);
    }
    if (Balance != 0F) {
      size += 1 + 4;
    }
    if (BalanceSat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceSat);
    }
    if (TotalReceived != 0F) {
      size += 1 + 4;
    }
    if (TotalReceivedSat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalReceivedSat);
    }
    if (TotalSent != 0F) {
      size += 1 + 4;
    }
    if (TotalSentSat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSentSat);
    }
    if (UnconfirmedBalance != 0F) {
      size += 1 + 4;
    }
    if (UnconfirmedBalanceSat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedBalanceSat);
    }
    if (UnconfirmedTxApperances != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedTxApperances);
    }
    if (TxApperances != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TxApperances);
    }
    size += transactions_.CalculateSize(_repeated_transactions_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BitIndexAddressDetails other) {
    if (other == null) {
      return;
    }
    if (other.AddrStr.Length != 0) {
      AddrStr = other.AddrStr;
    }
    if (other.Balance != 0F) {
      Balance = other.Balance;
    }
    if (other.BalanceSat != 0L) {
      BalanceSat = other.BalanceSat;
    }
    if (other.TotalReceived != 0F) {
      TotalReceived = other.TotalReceived;
    }
    if (other.TotalReceivedSat != 0L) {
      TotalReceivedSat = other.TotalReceivedSat;
    }
    if (other.TotalSent != 0F) {
      TotalSent = other.TotalSent;
    }
    if (other.TotalSentSat != 0L) {
      TotalSentSat = other.TotalSentSat;
    }
    if (other.UnconfirmedBalance != 0F) {
      UnconfirmedBalance = other.UnconfirmedBalance;
    }
    if (other.UnconfirmedBalanceSat != 0L) {
      UnconfirmedBalanceSat = other.UnconfirmedBalanceSat;
    }
    if (other.UnconfirmedTxApperances != 0L) {
      UnconfirmedTxApperances = other.UnconfirmedTxApperances;
    }
    if (other.TxApperances != 0L) {
      TxApperances = other.TxApperances;
    }
    transactions_.Add(other.transactions_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AddrStr = input.ReadString();
          break;
        }
        case 21: {
          Balance = input.ReadFloat();
          break;
        }
        case 24: {
          BalanceSat = input.ReadInt64();
          break;
        }
        case 37: {
          TotalReceived = input.ReadFloat();
          break;
        }
        case 40: {
          TotalReceivedSat = input.ReadInt64();
          break;
        }
        case 53: {
          TotalSent = input.ReadFloat();
          break;
        }
        case 56: {
          TotalSentSat = input.ReadInt64();
          break;
        }
        case 69: {
          UnconfirmedBalance = input.ReadFloat();
          break;
        }
        case 72: {
          UnconfirmedBalanceSat = input.ReadInt64();
          break;
        }
        case 80: {
          UnconfirmedTxApperances = input.ReadInt64();
          break;
        }
        case 88: {
          TxApperances = input.ReadInt64();
          break;
        }
        case 98: {
          transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
