// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bitflow.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from bitflow.proto</summary>
public static partial class BitflowReflection {

  #region Descriptor
  /// <summary>File descriptor for bitflow.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BitflowReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1iaXRmbG93LnByb3RvIr8BCgZTY2hlbWESCgoCaWQYASABKAkSDAoEbmFt",
          "ZRgCIAEoCRIdCgZmaWVsZHMYAyADKAsyDS5TY2hlbWEuRmllbGQaPwoFRmll",
          "bGQSCwoDa2V5GAEgASgJEg0KBWxhYmVsGAIgASgJEhoKBHR5cGUYAyABKA4y",
          "DC5TY2hlbWEuVHlwZSI7CgRUeXBlEggKBFRleHQQABIJCgVJbWFnZRABEggK",
          "BEZpbGUQAhIKCgZOdW1iZXIQAxIICgRCb29sEAQiRAoEVVRYTxIMCgR0eElk",
          "GAEgASgJEgwKBHZvdXQYAiABKAUSDgoGc2NyaXB0GAQgASgJEhAKCHNhdG9z",
          "aGlzGAUgASgFIukBCgVTdGFnZRIMCgRuYW1lGAEgASgJEhEKCXNjaGVtYVR4",
          "bhgCIAEoCRINCgVmdW5kcxgDIAEoBRINCgVwYXllZRgEIAEoCRIbChN2YWxp",
          "ZGF0aW9uU2NyaXB0VHhuGAUgASgJEiIKCm9uQ29tcGxldGUYBiABKAsyDi5T",
          "dGFnZS5IYW5kbGVyGmAKB0hhbmRsZXISGAoQcHJvY2Vzc1NjcmlwdFR4bhgB",
          "IAEoCRIaChJjcmVhdGVUYXNrU3RhZ2VJZHgYAiABKAUSEAoIYXNzaWduZWUY",
          "AyABKAkSDQoFZnVuZHMYBCABKAUiPwoIV29ya2Zsb3cSDAoEdHhpZBgBIAEo",
          "CRINCgVvd25lchgCIAEoCRIWCgZzdGFnZXMYAyADKAsyBi5TdGFnZSKbAgoF",
          "U3RhdGUSDAoEdHhpZBgBIAEoCRIbCgh3b3JrZmxvdxgCIAEoCzIJLldvcmtm",
          "bG93Eh0KBnN0YXR1cxgDIAEoDjINLlN0YXRlLlN0YXR1cxIMCgRkYXRhGAQg",
          "ASgJEhoKBXRhc2tzGAUgAygLMgsuU3RhdGUuVGFzaxpxCgRUYXNrEhUKBXN0",
          "YWdlGAEgASgLMgYuU3RhZ2USHQoGc3RhdHVzGAIgASgOMg0uU3RhdGUuU3Rh",
          "dHVzEg8KB2FkZHJlc3MYAyABKAkSFAoFdXR4b3MYBCADKAsyBS5VVFhPEgwK",
          "BHR4aWQYBSABKAkiKwoGU3RhdHVzEggKBE9wZW4QABIJCgVFcnJvchABEgwK",
          "CENvbXBsZXRlEAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Schema), global::Schema.Parser, new[]{ "Id", "Name", "Fields" }, null, new[]{ typeof(global::Schema.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Types.Field), global::Schema.Types.Field.Parser, new[]{ "Key", "Label", "Type" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::UTXO), global::UTXO.Parser, new[]{ "TxId", "Vout", "Script", "Satoshis" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Stage), global::Stage.Parser, new[]{ "Name", "SchemaTxn", "Funds", "Payee", "ValidationScriptTxn", "OnComplete" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Stage.Types.Handler), global::Stage.Types.Handler.Parser, new[]{ "ProcessScriptTxn", "CreateTaskStageIdx", "Assignee", "Funds" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Workflow), global::Workflow.Parser, new[]{ "Txid", "Owner", "Stages" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::State), global::State.Parser, new[]{ "Txid", "Workflow", "Status", "Data", "Tasks" }, null, new[]{ typeof(global::State.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::State.Types.Task), global::State.Types.Task.Parser, new[]{ "Stage", "Status", "Address", "Utxos", "Txid" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Schema : pb::IMessage<Schema> {
  private static readonly pb::MessageParser<Schema> _parser = new pb::MessageParser<Schema>(() => new Schema());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Schema> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema(Schema other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    fields_ = other.fields_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema Clone() {
    return new Schema(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fields" field.</summary>
  public const int FieldsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Schema.Types.Field> _repeated_fields_codec
      = pb::FieldCodec.ForMessage(26, global::Schema.Types.Field.Parser);
  private readonly pbc::RepeatedField<global::Schema.Types.Field> fields_ = new pbc::RepeatedField<global::Schema.Types.Field>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Schema.Types.Field> Fields {
    get { return fields_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Schema);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Schema other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if(!fields_.Equals(other.fields_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= fields_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    fields_.WriteTo(output, _repeated_fields_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += fields_.CalculateSize(_repeated_fields_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Schema other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    fields_.Add(other.fields_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          fields_.AddEntriesFrom(input, _repeated_fields_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Schema message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("Text")] Text = 0,
      [pbr::OriginalName("Image")] Image = 1,
      [pbr::OriginalName("File")] File = 2,
      [pbr::OriginalName("Number")] Number = 3,
      [pbr::OriginalName("Bool")] Bool = 4,
    }

    public sealed partial class Field : pb::IMessage<Field> {
      private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Field> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Schema.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field(Field other) : this() {
        key_ = other.key_;
        label_ = other.label_;
        type_ = other.type_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field Clone() {
        return new Field(this);
      }

      /// <summary>Field number for the "key" field.</summary>
      public const int KeyFieldNumber = 1;
      private string key_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Key {
        get { return key_; }
        set {
          key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "label" field.</summary>
      public const int LabelFieldNumber = 2;
      private string label_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Label {
        get { return label_; }
        set {
          label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 3;
      private global::Schema.Types.Type type_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Schema.Types.Type Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Field);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Field other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Key != other.Key) return false;
        if (Label != other.Label) return false;
        if (Type != other.Type) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Key.Length != 0) hash ^= Key.GetHashCode();
        if (Label.Length != 0) hash ^= Label.GetHashCode();
        if (Type != 0) hash ^= Type.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Key.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Key);
        }
        if (Label.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Label);
        }
        if (Type != 0) {
          output.WriteRawTag(24);
          output.WriteEnum((int) Type);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Key.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
        }
        if (Label.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
        }
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Field other) {
        if (other == null) {
          return;
        }
        if (other.Key.Length != 0) {
          Key = other.Key;
        }
        if (other.Label.Length != 0) {
          Label = other.Label;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 18: {
              Label = input.ReadString();
              break;
            }
            case 24: {
              type_ = (global::Schema.Types.Type) input.ReadEnum();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class UTXO : pb::IMessage<UTXO> {
  private static readonly pb::MessageParser<UTXO> _parser = new pb::MessageParser<UTXO>(() => new UTXO());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UTXO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UTXO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UTXO(UTXO other) : this() {
    txId_ = other.txId_;
    vout_ = other.vout_;
    script_ = other.script_;
    satoshis_ = other.satoshis_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UTXO Clone() {
    return new UTXO(this);
  }

  /// <summary>Field number for the "txId" field.</summary>
  public const int TxIdFieldNumber = 1;
  private string txId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TxId {
    get { return txId_; }
    set {
      txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "vout" field.</summary>
  public const int VoutFieldNumber = 2;
  private int vout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vout {
    get { return vout_; }
    set {
      vout_ = value;
    }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 4;
  private string script_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return script_; }
    set {
      script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "satoshis" field.</summary>
  public const int SatoshisFieldNumber = 5;
  private int satoshis_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Satoshis {
    get { return satoshis_; }
    set {
      satoshis_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UTXO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UTXO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TxId != other.TxId) return false;
    if (Vout != other.Vout) return false;
    if (Script != other.Script) return false;
    if (Satoshis != other.Satoshis) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TxId.Length != 0) hash ^= TxId.GetHashCode();
    if (Vout != 0) hash ^= Vout.GetHashCode();
    if (Script.Length != 0) hash ^= Script.GetHashCode();
    if (Satoshis != 0) hash ^= Satoshis.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TxId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TxId);
    }
    if (Vout != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Vout);
    }
    if (Script.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Script);
    }
    if (Satoshis != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Satoshis);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TxId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
    }
    if (Vout != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vout);
    }
    if (Script.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    if (Satoshis != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Satoshis);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UTXO other) {
    if (other == null) {
      return;
    }
    if (other.TxId.Length != 0) {
      TxId = other.TxId;
    }
    if (other.Vout != 0) {
      Vout = other.Vout;
    }
    if (other.Script.Length != 0) {
      Script = other.Script;
    }
    if (other.Satoshis != 0) {
      Satoshis = other.Satoshis;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TxId = input.ReadString();
          break;
        }
        case 16: {
          Vout = input.ReadInt32();
          break;
        }
        case 34: {
          Script = input.ReadString();
          break;
        }
        case 40: {
          Satoshis = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Stage : pb::IMessage<Stage> {
  private static readonly pb::MessageParser<Stage> _parser = new pb::MessageParser<Stage>(() => new Stage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Stage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage(Stage other) : this() {
    name_ = other.name_;
    schemaTxn_ = other.schemaTxn_;
    funds_ = other.funds_;
    payee_ = other.payee_;
    validationScriptTxn_ = other.validationScriptTxn_;
    onComplete_ = other.onComplete_ != null ? other.onComplete_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage Clone() {
    return new Stage(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "schemaTxn" field.</summary>
  public const int SchemaTxnFieldNumber = 2;
  private string schemaTxn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SchemaTxn {
    get { return schemaTxn_; }
    set {
      schemaTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "funds" field.</summary>
  public const int FundsFieldNumber = 3;
  private int funds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Funds {
    get { return funds_; }
    set {
      funds_ = value;
    }
  }

  /// <summary>Field number for the "payee" field.</summary>
  public const int PayeeFieldNumber = 4;
  private string payee_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Payee {
    get { return payee_; }
    set {
      payee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "validationScriptTxn" field.</summary>
  public const int ValidationScriptTxnFieldNumber = 5;
  private string validationScriptTxn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ValidationScriptTxn {
    get { return validationScriptTxn_; }
    set {
      validationScriptTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "onComplete" field.</summary>
  public const int OnCompleteFieldNumber = 6;
  private global::Stage.Types.Handler onComplete_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Stage.Types.Handler OnComplete {
    get { return onComplete_; }
    set {
      onComplete_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Stage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Stage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (SchemaTxn != other.SchemaTxn) return false;
    if (Funds != other.Funds) return false;
    if (Payee != other.Payee) return false;
    if (ValidationScriptTxn != other.ValidationScriptTxn) return false;
    if (!object.Equals(OnComplete, other.OnComplete)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (SchemaTxn.Length != 0) hash ^= SchemaTxn.GetHashCode();
    if (Funds != 0) hash ^= Funds.GetHashCode();
    if (Payee.Length != 0) hash ^= Payee.GetHashCode();
    if (ValidationScriptTxn.Length != 0) hash ^= ValidationScriptTxn.GetHashCode();
    if (onComplete_ != null) hash ^= OnComplete.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (SchemaTxn.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SchemaTxn);
    }
    if (Funds != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Funds);
    }
    if (Payee.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Payee);
    }
    if (ValidationScriptTxn.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ValidationScriptTxn);
    }
    if (onComplete_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(OnComplete);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (SchemaTxn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaTxn);
    }
    if (Funds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Funds);
    }
    if (Payee.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Payee);
    }
    if (ValidationScriptTxn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidationScriptTxn);
    }
    if (onComplete_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnComplete);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Stage other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.SchemaTxn.Length != 0) {
      SchemaTxn = other.SchemaTxn;
    }
    if (other.Funds != 0) {
      Funds = other.Funds;
    }
    if (other.Payee.Length != 0) {
      Payee = other.Payee;
    }
    if (other.ValidationScriptTxn.Length != 0) {
      ValidationScriptTxn = other.ValidationScriptTxn;
    }
    if (other.onComplete_ != null) {
      if (onComplete_ == null) {
        onComplete_ = new global::Stage.Types.Handler();
      }
      OnComplete.MergeFrom(other.OnComplete);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          SchemaTxn = input.ReadString();
          break;
        }
        case 24: {
          Funds = input.ReadInt32();
          break;
        }
        case 34: {
          Payee = input.ReadString();
          break;
        }
        case 42: {
          ValidationScriptTxn = input.ReadString();
          break;
        }
        case 50: {
          if (onComplete_ == null) {
            onComplete_ = new global::Stage.Types.Handler();
          }
          input.ReadMessage(onComplete_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Stage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Handler : pb::IMessage<Handler> {
      private static readonly pb::MessageParser<Handler> _parser = new pb::MessageParser<Handler>(() => new Handler());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Handler> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Stage.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler(Handler other) : this() {
        processScriptTxn_ = other.processScriptTxn_;
        createTaskStageIdx_ = other.createTaskStageIdx_;
        assignee_ = other.assignee_;
        funds_ = other.funds_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler Clone() {
        return new Handler(this);
      }

      /// <summary>Field number for the "processScriptTxn" field.</summary>
      public const int ProcessScriptTxnFieldNumber = 1;
      private string processScriptTxn_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ProcessScriptTxn {
        get { return processScriptTxn_; }
        set {
          processScriptTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "createTaskStageIdx" field.</summary>
      public const int CreateTaskStageIdxFieldNumber = 2;
      private int createTaskStageIdx_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CreateTaskStageIdx {
        get { return createTaskStageIdx_; }
        set {
          createTaskStageIdx_ = value;
        }
      }

      /// <summary>Field number for the "assignee" field.</summary>
      public const int AssigneeFieldNumber = 3;
      private string assignee_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Assignee {
        get { return assignee_; }
        set {
          assignee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "funds" field.</summary>
      public const int FundsFieldNumber = 4;
      private int funds_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Funds {
        get { return funds_; }
        set {
          funds_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Handler);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Handler other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ProcessScriptTxn != other.ProcessScriptTxn) return false;
        if (CreateTaskStageIdx != other.CreateTaskStageIdx) return false;
        if (Assignee != other.Assignee) return false;
        if (Funds != other.Funds) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (ProcessScriptTxn.Length != 0) hash ^= ProcessScriptTxn.GetHashCode();
        if (CreateTaskStageIdx != 0) hash ^= CreateTaskStageIdx.GetHashCode();
        if (Assignee.Length != 0) hash ^= Assignee.GetHashCode();
        if (Funds != 0) hash ^= Funds.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (ProcessScriptTxn.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(ProcessScriptTxn);
        }
        if (CreateTaskStageIdx != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(CreateTaskStageIdx);
        }
        if (Assignee.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Assignee);
        }
        if (Funds != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(Funds);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (ProcessScriptTxn.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessScriptTxn);
        }
        if (CreateTaskStageIdx != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTaskStageIdx);
        }
        if (Assignee.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignee);
        }
        if (Funds != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Funds);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Handler other) {
        if (other == null) {
          return;
        }
        if (other.ProcessScriptTxn.Length != 0) {
          ProcessScriptTxn = other.ProcessScriptTxn;
        }
        if (other.CreateTaskStageIdx != 0) {
          CreateTaskStageIdx = other.CreateTaskStageIdx;
        }
        if (other.Assignee.Length != 0) {
          Assignee = other.Assignee;
        }
        if (other.Funds != 0) {
          Funds = other.Funds;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              ProcessScriptTxn = input.ReadString();
              break;
            }
            case 16: {
              CreateTaskStageIdx = input.ReadInt32();
              break;
            }
            case 26: {
              Assignee = input.ReadString();
              break;
            }
            case 32: {
              Funds = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class Workflow : pb::IMessage<Workflow> {
  private static readonly pb::MessageParser<Workflow> _parser = new pb::MessageParser<Workflow>(() => new Workflow());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Workflow> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow(Workflow other) : this() {
    txid_ = other.txid_;
    owner_ = other.owner_;
    stages_ = other.stages_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow Clone() {
    return new Workflow(this);
  }

  /// <summary>Field number for the "txid" field.</summary>
  public const int TxidFieldNumber = 1;
  private string txid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Txid {
    get { return txid_; }
    set {
      txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 2;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stages" field.</summary>
  public const int StagesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Stage> _repeated_stages_codec
      = pb::FieldCodec.ForMessage(26, global::Stage.Parser);
  private readonly pbc::RepeatedField<global::Stage> stages_ = new pbc::RepeatedField<global::Stage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Stage> Stages {
    get { return stages_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Workflow);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Workflow other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Txid != other.Txid) return false;
    if (Owner != other.Owner) return false;
    if(!stages_.Equals(other.stages_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Txid.Length != 0) hash ^= Txid.GetHashCode();
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    hash ^= stages_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Txid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Txid);
    }
    if (Owner.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Owner);
    }
    stages_.WriteTo(output, _repeated_stages_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Txid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
    }
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    size += stages_.CalculateSize(_repeated_stages_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Workflow other) {
    if (other == null) {
      return;
    }
    if (other.Txid.Length != 0) {
      Txid = other.Txid;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    stages_.Add(other.stages_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Txid = input.ReadString();
          break;
        }
        case 18: {
          Owner = input.ReadString();
          break;
        }
        case 26: {
          stages_.AddEntriesFrom(input, _repeated_stages_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class State : pb::IMessage<State> {
  private static readonly pb::MessageParser<State> _parser = new pb::MessageParser<State>(() => new State());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<State> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public State() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public State(State other) : this() {
    txid_ = other.txid_;
    workflow_ = other.workflow_ != null ? other.workflow_.Clone() : null;
    status_ = other.status_;
    data_ = other.data_;
    tasks_ = other.tasks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public State Clone() {
    return new State(this);
  }

  /// <summary>Field number for the "txid" field.</summary>
  public const int TxidFieldNumber = 1;
  private string txid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Txid {
    get { return txid_; }
    set {
      txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "workflow" field.</summary>
  public const int WorkflowFieldNumber = 2;
  private global::Workflow workflow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Workflow Workflow {
    get { return workflow_; }
    set {
      workflow_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private global::State.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::State.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private string data_ = "";
  /// <summary>
  /// JSON representation of state values
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 5;
  private static readonly pb::FieldCodec<global::State.Types.Task> _repeated_tasks_codec
      = pb::FieldCodec.ForMessage(42, global::State.Types.Task.Parser);
  private readonly pbc::RepeatedField<global::State.Types.Task> tasks_ = new pbc::RepeatedField<global::State.Types.Task>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::State.Types.Task> Tasks {
    get { return tasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as State);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(State other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Txid != other.Txid) return false;
    if (!object.Equals(Workflow, other.Workflow)) return false;
    if (Status != other.Status) return false;
    if (Data != other.Data) return false;
    if(!tasks_.Equals(other.tasks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Txid.Length != 0) hash ^= Txid.GetHashCode();
    if (workflow_ != null) hash ^= Workflow.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    hash ^= tasks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Txid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Txid);
    }
    if (workflow_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Workflow);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Status);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Data);
    }
    tasks_.WriteTo(output, _repeated_tasks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Txid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
    }
    if (workflow_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Workflow);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
    }
    size += tasks_.CalculateSize(_repeated_tasks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(State other) {
    if (other == null) {
      return;
    }
    if (other.Txid.Length != 0) {
      Txid = other.Txid;
    }
    if (other.workflow_ != null) {
      if (workflow_ == null) {
        workflow_ = new global::Workflow();
      }
      Workflow.MergeFrom(other.Workflow);
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    tasks_.Add(other.tasks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Txid = input.ReadString();
          break;
        }
        case 18: {
          if (workflow_ == null) {
            workflow_ = new global::Workflow();
          }
          input.ReadMessage(workflow_);
          break;
        }
        case 24: {
          status_ = (global::State.Types.Status) input.ReadEnum();
          break;
        }
        case 34: {
          Data = input.ReadString();
          break;
        }
        case 42: {
          tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the State message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("Open")] Open = 0,
      [pbr::OriginalName("Error")] Error = 1,
      [pbr::OriginalName("Complete")] Complete = 2,
    }

    public sealed partial class Task : pb::IMessage<Task> {
      private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Task> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::State.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task(Task other) : this() {
        stage_ = other.stage_ != null ? other.stage_.Clone() : null;
        status_ = other.status_;
        address_ = other.address_;
        utxos_ = other.utxos_.Clone();
        txid_ = other.txid_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task Clone() {
        return new Task(this);
      }

      /// <summary>Field number for the "stage" field.</summary>
      public const int StageFieldNumber = 1;
      private global::Stage stage_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Stage Stage {
        get { return stage_; }
        set {
          stage_ = value;
        }
      }

      /// <summary>Field number for the "status" field.</summary>
      public const int StatusFieldNumber = 2;
      private global::State.Types.Status status_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::State.Types.Status Status {
        get { return status_; }
        set {
          status_ = value;
        }
      }

      /// <summary>Field number for the "address" field.</summary>
      public const int AddressFieldNumber = 3;
      private string address_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Address {
        get { return address_; }
        set {
          address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "utxos" field.</summary>
      public const int UtxosFieldNumber = 4;
      private static readonly pb::FieldCodec<global::UTXO> _repeated_utxos_codec
          = pb::FieldCodec.ForMessage(34, global::UTXO.Parser);
      private readonly pbc::RepeatedField<global::UTXO> utxos_ = new pbc::RepeatedField<global::UTXO>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::UTXO> Utxos {
        get { return utxos_; }
      }

      /// <summary>Field number for the "txid" field.</summary>
      public const int TxidFieldNumber = 5;
      private string txid_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Txid {
        get { return txid_; }
        set {
          txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Task);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Task other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Stage, other.Stage)) return false;
        if (Status != other.Status) return false;
        if (Address != other.Address) return false;
        if(!utxos_.Equals(other.utxos_)) return false;
        if (Txid != other.Txid) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (stage_ != null) hash ^= Stage.GetHashCode();
        if (Status != 0) hash ^= Status.GetHashCode();
        if (Address.Length != 0) hash ^= Address.GetHashCode();
        hash ^= utxos_.GetHashCode();
        if (Txid.Length != 0) hash ^= Txid.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (stage_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Stage);
        }
        if (Status != 0) {
          output.WriteRawTag(16);
          output.WriteEnum((int) Status);
        }
        if (Address.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Address);
        }
        utxos_.WriteTo(output, _repeated_utxos_codec);
        if (Txid.Length != 0) {
          output.WriteRawTag(42);
          output.WriteString(Txid);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (stage_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
        }
        if (Status != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
        }
        if (Address.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
        }
        size += utxos_.CalculateSize(_repeated_utxos_codec);
        if (Txid.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Task other) {
        if (other == null) {
          return;
        }
        if (other.stage_ != null) {
          if (stage_ == null) {
            stage_ = new global::Stage();
          }
          Stage.MergeFrom(other.Stage);
        }
        if (other.Status != 0) {
          Status = other.Status;
        }
        if (other.Address.Length != 0) {
          Address = other.Address;
        }
        utxos_.Add(other.utxos_);
        if (other.Txid.Length != 0) {
          Txid = other.Txid;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              if (stage_ == null) {
                stage_ = new global::Stage();
              }
              input.ReadMessage(stage_);
              break;
            }
            case 16: {
              status_ = (global::State.Types.Status) input.ReadEnum();
              break;
            }
            case 26: {
              Address = input.ReadString();
              break;
            }
            case 34: {
              utxos_.AddEntriesFrom(input, _repeated_utxos_codec);
              break;
            }
            case 42: {
              Txid = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
