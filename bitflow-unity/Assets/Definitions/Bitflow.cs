// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bitflow.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from bitflow.proto</summary>
public static partial class BitflowReflection {

  #region Descriptor
  /// <summary>File descriptor for bitflow.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BitflowReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1iaXRmbG93LnByb3RvIpEBCgZTY2hlbWESCgoCaWQYASABKAkSHQoGZmll",
          "bGRzGAIgAygLMg0uU2NoZW1hLkZpZWxkGj8KBUZpZWxkEgsKA2tleRgBIAEo",
          "CRINCgVsYWJlbBgCIAEoCRIaCgR0eXBlGAMgASgOMgwuU2NoZW1hLlR5cGUi",
          "GwoEVHlwZRIICgRUZXh0EAASCQoFSW1hZ2UQASLfAQoEU3RlcBIMCgRuYW1l",
          "GAEgASgJEhEKCXNjaGVtYVR4bhgCIAEoCRIVCg1mdW5kc1JlcXVpcmVkGAMg",
          "ASgFEhsKE3ZhbGlkYXRpb25TY3JpcHRUeG4YBCABKAkSIQoKb25Db21wbGV0",
          "ZRgFIAMoCzINLlN0ZXAuSGFuZGxlchpfCgdIYW5kbGVyEhgKEHByb2Nlc3NT",
          "Y3JpcHRUeG4YASABKAkSGQoRY3JlYXRlVGFza1N0ZXBJZHgYAiABKAUSEAoI",
          "YXNzaWduZWUYAyABKAkSDQoFZnVuZHMYBCABKAUiOwoIV29ya2Zsb3cSCgoC",
          "aWQYASABKAkSDQoFb3duZXIYAiABKAkSFAoFc3RlcHMYAyADKAsyBS5TdGVw",
          "Io0DCg1Xb3JrZmxvd1N0YXRlEgoKAmlkGAEgASgJEhMKC3dvcmtmbG93VHhu",
          "GAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEiUKBnN0YXR1cxgEIAEoDjIV",
          "LldvcmtmbG93U3RhdGUuU3RhdHVzEiIKBXRhc2tzGAUgAygLMhMuV29ya2Zs",
          "b3dTdGF0ZS5UYXNrEg0KBXN0YXRlGAYgASgJGlUKBFVUWE8SDAoEdHhJZBgB",
          "IAEoCRIMCgR2b3V0GAIgASgFEg8KB2FkZHJlc3MYAyABKAkSDgoGc2NyaXB0",
          "GAQgASgJEhAKCHNhdG9zaGlzGAUgASgFGmUKBFRhc2sSEwoEc3RlcBgBIAEo",
          "CzIFLlN0ZXASJQoGc3RhdHVzGAIgASgOMhUuV29ya2Zsb3dTdGF0ZS5TdGF0",
          "dXMSIQoEdXR4bxgDIAEoCzITLldvcmtmbG93U3RhdGUuVVRYTyIuCgZTdGF0",
          "dXMSCwoHUGVuZGluZxAAEgkKBUVycm9yEAESDAoIQ29tcGxldGUQAmIGcHJv",
          "dG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Schema), global::Schema.Parser, new[]{ "Id", "Fields" }, null, new[]{ typeof(global::Schema.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Types.Field), global::Schema.Types.Field.Parser, new[]{ "Key", "Label", "Type" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Step), global::Step.Parser, new[]{ "Name", "SchemaTxn", "FundsRequired", "ValidationScriptTxn", "OnComplete" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Step.Types.Handler), global::Step.Types.Handler.Parser, new[]{ "ProcessScriptTxn", "CreateTaskStepIdx", "Assignee", "Funds" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Workflow), global::Workflow.Parser, new[]{ "Id", "Owner", "Steps" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WorkflowState), global::WorkflowState.Parser, new[]{ "Id", "WorkflowTxn", "Description", "Status", "Tasks", "State" }, null, new[]{ typeof(global::WorkflowState.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WorkflowState.Types.UTXO), global::WorkflowState.Types.UTXO.Parser, new[]{ "TxId", "Vout", "Address", "Script", "Satoshis" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WorkflowState.Types.Task), global::WorkflowState.Types.Task.Parser, new[]{ "Step", "Status", "Utxo" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Schema : pb::IMessage<Schema> {
  private static readonly pb::MessageParser<Schema> _parser = new pb::MessageParser<Schema>(() => new Schema());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Schema> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema(Schema other) : this() {
    id_ = other.id_;
    fields_ = other.fields_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schema Clone() {
    return new Schema(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fields" field.</summary>
  public const int FieldsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Schema.Types.Field> _repeated_fields_codec
      = pb::FieldCodec.ForMessage(18, global::Schema.Types.Field.Parser);
  private readonly pbc::RepeatedField<global::Schema.Types.Field> fields_ = new pbc::RepeatedField<global::Schema.Types.Field>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Schema.Types.Field> Fields {
    get { return fields_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Schema);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Schema other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!fields_.Equals(other.fields_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    hash ^= fields_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    fields_.WriteTo(output, _repeated_fields_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    size += fields_.CalculateSize(_repeated_fields_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Schema other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    fields_.Add(other.fields_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          fields_.AddEntriesFrom(input, _repeated_fields_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Schema message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("Text")] Text = 0,
      [pbr::OriginalName("Image")] Image = 1,
    }

    public sealed partial class Field : pb::IMessage<Field> {
      private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Field> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Schema.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field(Field other) : this() {
        key_ = other.key_;
        label_ = other.label_;
        type_ = other.type_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Field Clone() {
        return new Field(this);
      }

      /// <summary>Field number for the "key" field.</summary>
      public const int KeyFieldNumber = 1;
      private string key_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Key {
        get { return key_; }
        set {
          key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "label" field.</summary>
      public const int LabelFieldNumber = 2;
      private string label_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Label {
        get { return label_; }
        set {
          label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 3;
      private global::Schema.Types.Type type_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Schema.Types.Type Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Field);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Field other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Key != other.Key) return false;
        if (Label != other.Label) return false;
        if (Type != other.Type) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Key.Length != 0) hash ^= Key.GetHashCode();
        if (Label.Length != 0) hash ^= Label.GetHashCode();
        if (Type != 0) hash ^= Type.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Key.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Key);
        }
        if (Label.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Label);
        }
        if (Type != 0) {
          output.WriteRawTag(24);
          output.WriteEnum((int) Type);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Key.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
        }
        if (Label.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
        }
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Field other) {
        if (other == null) {
          return;
        }
        if (other.Key.Length != 0) {
          Key = other.Key;
        }
        if (other.Label.Length != 0) {
          Label = other.Label;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 18: {
              Label = input.ReadString();
              break;
            }
            case 24: {
              type_ = (global::Schema.Types.Type) input.ReadEnum();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class Step : pb::IMessage<Step> {
  private static readonly pb::MessageParser<Step> _parser = new pb::MessageParser<Step>(() => new Step());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Step> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Step() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Step(Step other) : this() {
    name_ = other.name_;
    schemaTxn_ = other.schemaTxn_;
    fundsRequired_ = other.fundsRequired_;
    validationScriptTxn_ = other.validationScriptTxn_;
    onComplete_ = other.onComplete_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Step Clone() {
    return new Step(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "schemaTxn" field.</summary>
  public const int SchemaTxnFieldNumber = 2;
  private string schemaTxn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SchemaTxn {
    get { return schemaTxn_; }
    set {
      schemaTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fundsRequired" field.</summary>
  public const int FundsRequiredFieldNumber = 3;
  private int fundsRequired_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FundsRequired {
    get { return fundsRequired_; }
    set {
      fundsRequired_ = value;
    }
  }

  /// <summary>Field number for the "validationScriptTxn" field.</summary>
  public const int ValidationScriptTxnFieldNumber = 4;
  private string validationScriptTxn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ValidationScriptTxn {
    get { return validationScriptTxn_; }
    set {
      validationScriptTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "onComplete" field.</summary>
  public const int OnCompleteFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Step.Types.Handler> _repeated_onComplete_codec
      = pb::FieldCodec.ForMessage(42, global::Step.Types.Handler.Parser);
  private readonly pbc::RepeatedField<global::Step.Types.Handler> onComplete_ = new pbc::RepeatedField<global::Step.Types.Handler>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Step.Types.Handler> OnComplete {
    get { return onComplete_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Step);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Step other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (SchemaTxn != other.SchemaTxn) return false;
    if (FundsRequired != other.FundsRequired) return false;
    if (ValidationScriptTxn != other.ValidationScriptTxn) return false;
    if(!onComplete_.Equals(other.onComplete_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (SchemaTxn.Length != 0) hash ^= SchemaTxn.GetHashCode();
    if (FundsRequired != 0) hash ^= FundsRequired.GetHashCode();
    if (ValidationScriptTxn.Length != 0) hash ^= ValidationScriptTxn.GetHashCode();
    hash ^= onComplete_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (SchemaTxn.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SchemaTxn);
    }
    if (FundsRequired != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FundsRequired);
    }
    if (ValidationScriptTxn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ValidationScriptTxn);
    }
    onComplete_.WriteTo(output, _repeated_onComplete_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (SchemaTxn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaTxn);
    }
    if (FundsRequired != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FundsRequired);
    }
    if (ValidationScriptTxn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidationScriptTxn);
    }
    size += onComplete_.CalculateSize(_repeated_onComplete_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Step other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.SchemaTxn.Length != 0) {
      SchemaTxn = other.SchemaTxn;
    }
    if (other.FundsRequired != 0) {
      FundsRequired = other.FundsRequired;
    }
    if (other.ValidationScriptTxn.Length != 0) {
      ValidationScriptTxn = other.ValidationScriptTxn;
    }
    onComplete_.Add(other.onComplete_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          SchemaTxn = input.ReadString();
          break;
        }
        case 24: {
          FundsRequired = input.ReadInt32();
          break;
        }
        case 34: {
          ValidationScriptTxn = input.ReadString();
          break;
        }
        case 42: {
          onComplete_.AddEntriesFrom(input, _repeated_onComplete_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Step message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Handler : pb::IMessage<Handler> {
      private static readonly pb::MessageParser<Handler> _parser = new pb::MessageParser<Handler>(() => new Handler());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Handler> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Step.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler(Handler other) : this() {
        processScriptTxn_ = other.processScriptTxn_;
        createTaskStepIdx_ = other.createTaskStepIdx_;
        assignee_ = other.assignee_;
        funds_ = other.funds_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Handler Clone() {
        return new Handler(this);
      }

      /// <summary>Field number for the "processScriptTxn" field.</summary>
      public const int ProcessScriptTxnFieldNumber = 1;
      private string processScriptTxn_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ProcessScriptTxn {
        get { return processScriptTxn_; }
        set {
          processScriptTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "createTaskStepIdx" field.</summary>
      public const int CreateTaskStepIdxFieldNumber = 2;
      private int createTaskStepIdx_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CreateTaskStepIdx {
        get { return createTaskStepIdx_; }
        set {
          createTaskStepIdx_ = value;
        }
      }

      /// <summary>Field number for the "assignee" field.</summary>
      public const int AssigneeFieldNumber = 3;
      private string assignee_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Assignee {
        get { return assignee_; }
        set {
          assignee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "funds" field.</summary>
      public const int FundsFieldNumber = 4;
      private int funds_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Funds {
        get { return funds_; }
        set {
          funds_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Handler);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Handler other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ProcessScriptTxn != other.ProcessScriptTxn) return false;
        if (CreateTaskStepIdx != other.CreateTaskStepIdx) return false;
        if (Assignee != other.Assignee) return false;
        if (Funds != other.Funds) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (ProcessScriptTxn.Length != 0) hash ^= ProcessScriptTxn.GetHashCode();
        if (CreateTaskStepIdx != 0) hash ^= CreateTaskStepIdx.GetHashCode();
        if (Assignee.Length != 0) hash ^= Assignee.GetHashCode();
        if (Funds != 0) hash ^= Funds.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (ProcessScriptTxn.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(ProcessScriptTxn);
        }
        if (CreateTaskStepIdx != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(CreateTaskStepIdx);
        }
        if (Assignee.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Assignee);
        }
        if (Funds != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(Funds);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (ProcessScriptTxn.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessScriptTxn);
        }
        if (CreateTaskStepIdx != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTaskStepIdx);
        }
        if (Assignee.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignee);
        }
        if (Funds != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Funds);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Handler other) {
        if (other == null) {
          return;
        }
        if (other.ProcessScriptTxn.Length != 0) {
          ProcessScriptTxn = other.ProcessScriptTxn;
        }
        if (other.CreateTaskStepIdx != 0) {
          CreateTaskStepIdx = other.CreateTaskStepIdx;
        }
        if (other.Assignee.Length != 0) {
          Assignee = other.Assignee;
        }
        if (other.Funds != 0) {
          Funds = other.Funds;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              ProcessScriptTxn = input.ReadString();
              break;
            }
            case 16: {
              CreateTaskStepIdx = input.ReadInt32();
              break;
            }
            case 26: {
              Assignee = input.ReadString();
              break;
            }
            case 32: {
              Funds = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class Workflow : pb::IMessage<Workflow> {
  private static readonly pb::MessageParser<Workflow> _parser = new pb::MessageParser<Workflow>(() => new Workflow());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Workflow> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow(Workflow other) : this() {
    id_ = other.id_;
    owner_ = other.owner_;
    steps_ = other.steps_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Workflow Clone() {
    return new Workflow(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 2;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "steps" field.</summary>
  public const int StepsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Step> _repeated_steps_codec
      = pb::FieldCodec.ForMessage(26, global::Step.Parser);
  private readonly pbc::RepeatedField<global::Step> steps_ = new pbc::RepeatedField<global::Step>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Step> Steps {
    get { return steps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Workflow);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Workflow other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Owner != other.Owner) return false;
    if(!steps_.Equals(other.steps_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    hash ^= steps_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Owner.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Owner);
    }
    steps_.WriteTo(output, _repeated_steps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    size += steps_.CalculateSize(_repeated_steps_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Workflow other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    steps_.Add(other.steps_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Owner = input.ReadString();
          break;
        }
        case 26: {
          steps_.AddEntriesFrom(input, _repeated_steps_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class WorkflowState : pb::IMessage<WorkflowState> {
  private static readonly pb::MessageParser<WorkflowState> _parser = new pb::MessageParser<WorkflowState>(() => new WorkflowState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WorkflowState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BitflowReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorkflowState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorkflowState(WorkflowState other) : this() {
    id_ = other.id_;
    workflowTxn_ = other.workflowTxn_;
    description_ = other.description_;
    status_ = other.status_;
    tasks_ = other.tasks_.Clone();
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorkflowState Clone() {
    return new WorkflowState(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "workflowTxn" field.</summary>
  public const int WorkflowTxnFieldNumber = 2;
  private string workflowTxn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WorkflowTxn {
    get { return workflowTxn_; }
    set {
      workflowTxn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 4;
  private global::WorkflowState.Types.Status status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WorkflowState.Types.Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 5;
  private static readonly pb::FieldCodec<global::WorkflowState.Types.Task> _repeated_tasks_codec
      = pb::FieldCodec.ForMessage(42, global::WorkflowState.Types.Task.Parser);
  private readonly pbc::RepeatedField<global::WorkflowState.Types.Task> tasks_ = new pbc::RepeatedField<global::WorkflowState.Types.Task>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WorkflowState.Types.Task> Tasks {
    get { return tasks_; }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 6;
  private string state_ = "";
  /// <summary>
  /// JSON representation of state values
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string State {
    get { return state_; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WorkflowState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WorkflowState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (WorkflowTxn != other.WorkflowTxn) return false;
    if (Description != other.Description) return false;
    if (Status != other.Status) return false;
    if(!tasks_.Equals(other.tasks_)) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (WorkflowTxn.Length != 0) hash ^= WorkflowTxn.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= tasks_.GetHashCode();
    if (State.Length != 0) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (WorkflowTxn.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(WorkflowTxn);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Status);
    }
    tasks_.WriteTo(output, _repeated_tasks_codec);
    if (State.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (WorkflowTxn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowTxn);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    size += tasks_.CalculateSize(_repeated_tasks_codec);
    if (State.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WorkflowState other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.WorkflowTxn.Length != 0) {
      WorkflowTxn = other.WorkflowTxn;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    tasks_.Add(other.tasks_);
    if (other.State.Length != 0) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          WorkflowTxn = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          status_ = (global::WorkflowState.Types.Status) input.ReadEnum();
          break;
        }
        case 42: {
          tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
          break;
        }
        case 50: {
          State = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the WorkflowState message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Status {
      [pbr::OriginalName("Pending")] Pending = 0,
      [pbr::OriginalName("Error")] Error = 1,
      [pbr::OriginalName("Complete")] Complete = 2,
    }

    public sealed partial class UTXO : pb::IMessage<UTXO> {
      private static readonly pb::MessageParser<UTXO> _parser = new pb::MessageParser<UTXO>(() => new UTXO());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<UTXO> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::WorkflowState.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UTXO() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UTXO(UTXO other) : this() {
        txId_ = other.txId_;
        vout_ = other.vout_;
        address_ = other.address_;
        script_ = other.script_;
        satoshis_ = other.satoshis_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UTXO Clone() {
        return new UTXO(this);
      }

      /// <summary>Field number for the "txId" field.</summary>
      public const int TxIdFieldNumber = 1;
      private string txId_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string TxId {
        get { return txId_; }
        set {
          txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "vout" field.</summary>
      public const int VoutFieldNumber = 2;
      private int vout_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Vout {
        get { return vout_; }
        set {
          vout_ = value;
        }
      }

      /// <summary>Field number for the "address" field.</summary>
      public const int AddressFieldNumber = 3;
      private string address_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Address {
        get { return address_; }
        set {
          address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "script" field.</summary>
      public const int ScriptFieldNumber = 4;
      private string script_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Script {
        get { return script_; }
        set {
          script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "satoshis" field.</summary>
      public const int SatoshisFieldNumber = 5;
      private int satoshis_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Satoshis {
        get { return satoshis_; }
        set {
          satoshis_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as UTXO);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(UTXO other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (TxId != other.TxId) return false;
        if (Vout != other.Vout) return false;
        if (Address != other.Address) return false;
        if (Script != other.Script) return false;
        if (Satoshis != other.Satoshis) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (TxId.Length != 0) hash ^= TxId.GetHashCode();
        if (Vout != 0) hash ^= Vout.GetHashCode();
        if (Address.Length != 0) hash ^= Address.GetHashCode();
        if (Script.Length != 0) hash ^= Script.GetHashCode();
        if (Satoshis != 0) hash ^= Satoshis.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (TxId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(TxId);
        }
        if (Vout != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Vout);
        }
        if (Address.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Address);
        }
        if (Script.Length != 0) {
          output.WriteRawTag(34);
          output.WriteString(Script);
        }
        if (Satoshis != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(Satoshis);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (TxId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
        }
        if (Vout != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vout);
        }
        if (Address.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
        }
        if (Script.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Script);
        }
        if (Satoshis != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Satoshis);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(UTXO other) {
        if (other == null) {
          return;
        }
        if (other.TxId.Length != 0) {
          TxId = other.TxId;
        }
        if (other.Vout != 0) {
          Vout = other.Vout;
        }
        if (other.Address.Length != 0) {
          Address = other.Address;
        }
        if (other.Script.Length != 0) {
          Script = other.Script;
        }
        if (other.Satoshis != 0) {
          Satoshis = other.Satoshis;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              TxId = input.ReadString();
              break;
            }
            case 16: {
              Vout = input.ReadInt32();
              break;
            }
            case 26: {
              Address = input.ReadString();
              break;
            }
            case 34: {
              Script = input.ReadString();
              break;
            }
            case 40: {
              Satoshis = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Task : pb::IMessage<Task> {
      private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Task> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::WorkflowState.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task(Task other) : this() {
        step_ = other.step_ != null ? other.step_.Clone() : null;
        status_ = other.status_;
        utxo_ = other.utxo_ != null ? other.utxo_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Task Clone() {
        return new Task(this);
      }

      /// <summary>Field number for the "step" field.</summary>
      public const int StepFieldNumber = 1;
      private global::Step step_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Step Step {
        get { return step_; }
        set {
          step_ = value;
        }
      }

      /// <summary>Field number for the "status" field.</summary>
      public const int StatusFieldNumber = 2;
      private global::WorkflowState.Types.Status status_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::WorkflowState.Types.Status Status {
        get { return status_; }
        set {
          status_ = value;
        }
      }

      /// <summary>Field number for the "utxo" field.</summary>
      public const int UtxoFieldNumber = 3;
      private global::WorkflowState.Types.UTXO utxo_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::WorkflowState.Types.UTXO Utxo {
        get { return utxo_; }
        set {
          utxo_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Task);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Task other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Step, other.Step)) return false;
        if (Status != other.Status) return false;
        if (!object.Equals(Utxo, other.Utxo)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (step_ != null) hash ^= Step.GetHashCode();
        if (Status != 0) hash ^= Status.GetHashCode();
        if (utxo_ != null) hash ^= Utxo.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (step_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Step);
        }
        if (Status != 0) {
          output.WriteRawTag(16);
          output.WriteEnum((int) Status);
        }
        if (utxo_ != null) {
          output.WriteRawTag(26);
          output.WriteMessage(Utxo);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (step_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Step);
        }
        if (Status != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
        }
        if (utxo_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Utxo);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Task other) {
        if (other == null) {
          return;
        }
        if (other.step_ != null) {
          if (step_ == null) {
            step_ = new global::Step();
          }
          Step.MergeFrom(other.Step);
        }
        if (other.Status != 0) {
          Status = other.Status;
        }
        if (other.utxo_ != null) {
          if (utxo_ == null) {
            utxo_ = new global::WorkflowState.Types.UTXO();
          }
          Utxo.MergeFrom(other.Utxo);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              if (step_ == null) {
                step_ = new global::Step();
              }
              input.ReadMessage(step_);
              break;
            }
            case 16: {
              status_ = (global::WorkflowState.Types.Status) input.ReadEnum();
              break;
            }
            case 26: {
              if (utxo_ == null) {
                utxo_ = new global::WorkflowState.Types.UTXO();
              }
              input.ReadMessage(utxo_);
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
